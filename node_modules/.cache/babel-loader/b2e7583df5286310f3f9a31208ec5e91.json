{"ast":null,"code":"import _objectSpread from \"/home/sahil/WorkFiles/test/raashish/di1udk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/sahil/WorkFiles/test/raashish/di1udk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/home/sahil/WorkFiles/test/raashish/di1udk/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"text\", \"type\", \"placeholder\", \"children\"];\nvar _jsxFileName = \"/home/sahil/WorkFiles/test/raashish/di1udk/src/comp/Editable.js\",\n  _this = this,\n  _s = $RefreshSig$();\n// Editable.js\nimport React, { useState } from \"react\";\n\n// Component accept text, placeholder values and also pass what type of Input - input, textarea so that we can use it for styling accordingly\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar Editable = function Editable(_ref) {\n  _s();\n  var text = _ref.text,\n    type = _ref.type,\n    placeholder = _ref.placeholder,\n    children = _ref.children,\n    props = _objectWithoutProperties(_ref, _excluded);\n  // Manage the state whether to show the label or the input box. By default, label will be shown.\n  // Exercise: It can be made dynamic by accepting initial state as props outside the component \n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isEditing = _useState2[0],\n    setEditing = _useState2[1];\n\n  // Event handler while pressing any key while editing\n  var handleKeyDown = function handleKeyDown(event, type) {\n    // Handle when key is pressed\n  };\n\n  /*\n  - It will display a label is `isEditing` is false\n  - It will display the children (input or textarea) if `isEditing` is true\n  - when input `onBlur`, we will set the default non edit mode\n  Note: For simplicity purpose, I removed all the classnames, you can check the repo for CSS styles\n  */\n  return /*#__PURE__*/_jsxDEV(\"section\", _objectSpread(_objectSpread({}, props), {}, {\n    children: isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n      onBlur: function onBlur() {\n        return setEditing(false);\n      },\n      onKeyDown: function onKeyDown(e) {\n        return handleKeyDown(e, type);\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, _this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: function onClick() {\n        return setEditing(true);\n      },\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: text || placeholder || \"Editable content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, _this)\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, _this);\n};\n_s(Editable, \"tuiZ/XkP3IIihHgOqim00M9Cb2U=\");\n_c = Editable;\nexport default Editable;\nvar _c;\n$RefreshReg$(_c, \"Editable\");","map":{"version":3,"names":["React","useState","Editable","text","type","placeholder","children","props","isEditing","setEditing","handleKeyDown","event","e"],"sources":["/home/sahil/WorkFiles/test/raashish/di1udk/src/comp/Editable.js"],"sourcesContent":["// Editable.js\nimport React, { useState } from \"react\";\n\n// Component accept text, placeholder values and also pass what type of Input - input, textarea so that we can use it for styling accordingly\nconst Editable = ({\n  text,\n  type,\n  placeholder,\n  children,\n  ...props\n}) => {\n  // Manage the state whether to show the label or the input box. By default, label will be shown.\n// Exercise: It can be made dynamic by accepting initial state as props outside the component \n  const [isEditing, setEditing] = useState(false);\n\n// Event handler while pressing any key while editing\n  const handleKeyDown = (event, type) => {\n    // Handle when key is pressed\n  };\n\n/*\n- It will display a label is `isEditing` is false\n- It will display the children (input or textarea) if `isEditing` is true\n- when input `onBlur`, we will set the default non edit mode\nNote: For simplicity purpose, I removed all the classnames, you can check the repo for CSS styles\n*/\n  return (\n    <section {...props}>\n      {isEditing ? (\n        <div\n          onBlur={() => setEditing(false)}\n          onKeyDown={e => handleKeyDown(e, type)}\n        >\n          {children}\n        </div>\n      ) : (\n        <div\n          onClick={() => setEditing(true)}\n        >\n          <span>\n            {text || placeholder || \"Editable content\"}\n          </span>\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Editable;"],"mappings":";;;;;;;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAEvC;AAAA;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,OAMR;EAAA;EAAA,IALJC,IAAI,QAAJA,IAAI;IACJC,IAAI,QAAJA,IAAI;IACJC,WAAW,QAAXA,WAAW;IACXC,QAAQ,QAARA,QAAQ;IACLC,KAAK;EAER;EACF;EACE,gBAAgCN,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAxCO,SAAS;IAAEC,UAAU;;EAE9B;EACE,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAIC,KAAK,EAAEP,IAAI,EAAK;IACrC;EAAA,CACD;;EAEH;AACA;AACA;AACA;AACA;AACA;EACE,oBACE,mDAAaG,KAAK;IAAA,UACfC,SAAS,gBACR;MACE,MAAM,EAAE;QAAA,OAAMC,UAAU,CAAC,KAAK,CAAC;MAAA,CAAC;MAChC,SAAS,EAAE,mBAAAG,CAAC;QAAA,OAAIF,aAAa,CAACE,CAAC,EAAER,IAAI,CAAC;MAAA,CAAC;MAAA,UAEtCE;IAAQ;MAAA;MAAA;MAAA;IAAA,SACL,gBAEN;MACE,OAAO,EAAE;QAAA,OAAMG,UAAU,CAAC,IAAI,CAAC;MAAA,CAAC;MAAA,uBAEhC;QAAA,UACGN,IAAI,IAAIE,WAAW,IAAI;MAAkB;QAAA;QAAA;QAAA;MAAA;IACrC;MAAA;MAAA;MAAA;IAAA;EAEV;IAAA;IAAA;IAAA;EAAA,SACO;AAEd,CAAC;AAAC,GA1CIH,QAAQ;AAAA,KAARA,QAAQ;AA4Cd,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module"}